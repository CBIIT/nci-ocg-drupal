<?php

/**
 * Implements hook_form_alter
 */
function custom_form_alter(&$form, &$form_state, $form_id) {
  //print_r($form);
  unset($form['fld_title']['#title']);
  if (!empty($form['fld_title']['#markup'])) {
    $form['fld_title']['#markup'] = '<div class="page-mailed"><strong>'.t('Page to be mailed: ').'</strong>'.$form['fld_title']['#markup'].'</div>';
  }
  switch ($form_id) {
  //alter the None option in form node/add/publication for programs field. 
    case 'publication_node_form':
      if (isset($form['field_publication_program']['und']['#options']['_none'])) {
        $form['field_publication_program']['und']['#options']['_none'] = 'All Programs';
      }
    break;
    //alter the None option in form node/add/news for programs field. 
    case 'news_node_form':
      if (isset($form['field_news_program']['und']['#options']['_none'])) {
        $form['field_news_program']['und']['#options']['_none'] = 'All Programs';
      }
    break;
  }
}

/**
 * Implementation of hook_init()
 */
function custom_init() {
  $plugin = context_get_plugin('conditions', 'status');
  if ($plugin) {
    $plugin->execute();
  }
}


/**
 * Implements hook_context_plugins().
 *
 */
function custom_context_plugins() {
  $plugins = array();
  $plugins['custom_context_condition_status'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'custom'),
      'file' => 'custom_context_condition_status.inc',
      'class' => 'custom_context_condition_status',
      'parent' => 'context_condition',
    ),
  );
  
  return $plugins;
}

/**
 * Implements hook_context_registry().
 *
 */
function custom_context_registry() {
  return array(
    'conditions' => array(
      'status' => array(
        'title' => t('Status field'),
        'description' => t('Set this context based on the value of Status field.'),
        'plugin' => 'custom_context_condition_status',
      ),
    ),
  );
}

/**
 * Implementation of hook_views_pre_view().
 */
function custom_views_pre_view(&$view, &$display_id, &$args) {
  if (($view->name == 'news_and_publications') && ($display_id == 'block_2')) {
    $customargs = get_nodes_of_type('programs');
    //print $customargs;
    $args[0] = $customargs;
  }
}

/**
 * Return a list of nodes by their content type.
 *
 * @param  String
 *   $content_type The name of a content type.
 * @return Array
 *   A collection of nodes.
 */
function get_nodes_of_type($content_type) {

  $efq = new EntityFieldQuery();

  $result = $efq
    ->entityCondition('entity_type', 'node', '=')
    ->entityCondition('bundle', $content_type)
    ->execute();

  if (isset($result['node'])) {
    $program_nodes = array_keys($result['node']);
    $program_nids = '';
    $key = 0;
    foreach ($program_nodes as $programs) {
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        if ($programs == arg(1)) {
	    unset($program_nodes[$key]);
      }
      $key++;
      }
    }  
    $program_nids = implode('+',$program_nodes);
    return $program_nids;
    }
}

/**
 * Implements hook_form_FORMID_alter
 */
function custom_form_views_ui_config_item_form_alter(&$form, &$form_state, $form_id) {
  $form['options']['content']['#wysiwyg'] = TRUE;
}

/**
 * Alter the query before executing the query.
 *
 * 
 * @param $view
 *   The view object about to be processed.
 * @param $query
 *   An object describing the query.
 * @see hook_views_query_substitutions()
 */
function custom_views_query_alter(&$view, &$query) {
  
  // this is the name of our View and Display
  if ($view->name == 'news_and_publications' && $view->current_display == 'featured_news_publications') {
    dpm($view);
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
      array(
        'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
        'direction' => 'DESC',
      )
    );
  }
}