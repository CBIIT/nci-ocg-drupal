<?php

/**
 * @file
 * Lists design test.
 */

/**
 * Various kind of lists.
 *
 * @todo Add theme_links().
 */
function design_test_page_list() {
  // Regular list.
  $item_list = design_test_example_list();
  $output['item_list'] = array(
    '#theme' => 'item_list',
    '#items' => $item_list,
    '#title' => t('Item list'),
  );

  // List of links.
  $item_list_links = design_test_example_list(array('display_as_links' => TRUE));
  $output['item_list_links'] = array(
    '#theme' => 'item_list',
    '#items' => $item_list_links,
    '#title' => t('Item list containing links'),
  );

  // List of inline links generated by theme_links().
  $links_inline = design_test_example_links_list();
  $output['links_inline'] = array(
    '#theme' => 'links',
    '#heading' => t('Links (inline)'),
    '#attributes' => array('class' => array('links', 'inline')),
    '#links' => $links_inline,
  );

  // List of inline links (combined with markup) generated by theme_links().
  $links_inline_mixed = design_test_example_links_list(array('mixed' => TRUE));
  $output['links_inline_mixed'] = array(
    '#theme' => 'links',
    '#heading' => t('Links mixed with HTML (inline)'),
    '#attributes' => array('class' => array('links', 'inline')),
    '#links' => $links_inline_mixed,
  );

  // List of links generated by theme_links().
  $links = design_test_example_links_list();
  $output['links'] = array(
    '#theme' => 'links',
    '#heading' => t('Links'),
    '#attributes' => array('class' => array('links')),
    '#links' => $links,
  );

  // List of links (combined with markup) generated by theme_links().
  $links_mixed = design_test_example_links_list(array('mixed' => TRUE));
  $output['links_mixed'] = array(
    '#theme' => 'links',
    '#heading' => t('Links mixed with HTML'),
    '#attributes' => array('class' => array('links')),
    '#links' => $links_mixed,
  );

  return $output;
}

/**
 * Helper function to return a list.
 *
 * @param $options
 *   (optional) An associative array containing:
 *   - display_as_links: Boolean specifying whether to print the items as links.
 *   - items: Number of items to output in the list.
 *   - min: Minimum number of words to create when generating dummy text.
 *   - max: Maximum number of words to create when generating dummy text.
 */
function design_test_example_list($options = array()) {
  $options += array(
    'display_as_links' => FALSE,
    'items' => 5,
    'min' => 1,
    'max' => 3,
  );
  $display_as_links = $options['display_as_links'];
  $items = $options['items'];
  $min = $options['min'];
  $max = $options['max'];

  // Generate list items.
  $list = array();
  $i = 0;
  while ($i < $items) {
    $i++;
    $words = rand($min, $max);
    $text = design_test_create_greeking($words);

    if ($display_as_links) {
      $list[]['data'] = l($text, '#');
    }
    else {
      $list[]['data'] = $text;
    }
  }

  return $list;
}


/**
 * Helper function to return a list.
 *
 * @param $options
 *   (optional) An associative array containing:
 *   - mixed: Boolean specifying whether to mix in HTML with the links.
 *   - items: Number of items to output in the list.
 *   - min: Minimum number of words to create when generating dummy text.
 *   - max: Maximum number of words to create when generating dummy text.
 */
function design_test_example_links_list($options = array()) {
  $options += array(
    'items' => 5,
    'mixed' => FALSE,
    'min' => 1,
    'max' => 2,
  );
  $items = $options['items'];
  $mixed = $options['mixed'];
  $min = $options['min'];
  $max = $options['max'];

  // Generate list items.
  $list = array();

  $i = 0;
  while ($i < $items) {
    $i++;
    $words = rand($min, $max);
    $text = design_test_create_greeking($words);

    // Define the links.
    $list[$i]['title'] = $text;

    // Determine whether the links should mix in some HTML.
    if ($mixed) {
      $html = rand(0, 1);
      if ($html) {
        $list[$i]['html'] = $html;
      }
      else {
        $list[$i]['href'] = '<front>';
      }
    }
    else {
      $list[$i]['href'] = '<front>';
    }
  }

  return $list;
}
