<?php

/**
 * @file
 * Design test module functionality.
 *
 * @todo tableDrag.
 */

/**
 * Implements hook_menu().
 */
function design_test_menu() {
  // Turn each include file in the module directory into a local task.
  $categories = array();
  $module_path = drupal_get_path('module', 'design_test');
  $tests = file_scan_directory($module_path, '/\.inc$/', array('key' => 'name', 'recurse' => TRUE));
  foreach ($tests as $name => $file) {
    // Build include file path and category.
    $filepath = strtr($file->uri, array($module_path . '/' => ''));
    list($category) = explode('/', $filepath, 2);
    $categories[$category] = $category;
    // Build router item path.
    $path = preg_replace('@[^a-zA-Z0-9-]@', '-', $name);
    // Build page callback function name.
    $callback = "design_test_{$category}_" . strtr($path, '-', '_');
    // Build router item callback.
    if ($category == 'form') {
      $page_callback = 'drupal_get_form';
    }
    else {
      $page_callback = $callback;
    }
    $items["design_test/{$category}/{$path}"] = array(
      'title' => drupal_ucfirst($name),
      'page callback' => $page_callback,
      'page arguments' => array($callback),
      'file' => $filepath,
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK,
    );
  }

  // Now add some theme local tasks black magic...
  $themes = array();
  $list = list_themes();
  foreach ($list as $name => $theme) {
    if ($theme->status && !isset($theme->info['hidden'])) {
      $themes[$name] = $theme->info['name'];
    }
  }
  foreach ($items as $path => $item) {
    foreach ($themes as $name => $theme) {
      $items[$path . '/' . $name] = array(
        'title' => $theme,
        'type' => MENU_LOCAL_ACTION,
        'theme callback' => '_block_custom_theme',
        'theme arguments' => array($name),
        'access arguments' => array('access content'),
      );
    }
  }

  $items['design_test'] = array(
    'title' => 'Design test',
    'page callback' => 'design_test_category_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  $items['design_test/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // Lastly, add the category containers.
  foreach ($categories as $category) {
    $items["design_test/{$category}"] = array(
      'title' => drupal_ucfirst($category),
      'page callback' => 'design_test_category_page',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Menu page callback for a category listing page.
 */
function design_test_category_page($category) {
  $link = menu_link_get_preferred();
  $tree = menu_build_tree($link['menu_name'], array(
    'expanded' => array($link['mlid']),
    'min_depth' => $link['depth'] + 1,
    'max_depth' => $link['depth'] + 2,
  ));
  // Local tasks are hidden = -1, so normally not rendered in menu trees.
  foreach ($tree as &$data) {
    // Exclude default local tasks.
    if (!($data['link']['type'] & MENU_LINKS_TO_PARENT)) {
      $data['link']['hidden'] = 0;
    }
  }
  $build = menu_tree_output($tree);
  return $build;
}

/**
 * Implements hook_help().
 */
function design_test_help($path, $arg) {
  switch ($path) {
    // Output some help text sample on the generic HTML test page.
    case 'design_test/page/html':
      return 'Page help text. ' . design_test_create_greeking(20);
  }
}

/**
 * Implements hook_element_info().
 */
function design_test_element_info() {
  // Most HTML content tests need ...
  $types['p'] = array(
    '#theme' => 'html_tag__p',
    '#tag' => 'p',
    '#pre_render' => array('design_test_pre_render_paragraph'),
    '#attributes' => array(),
    '#value' => NULL,
  );
  return $types;
}

/**
 * #pre_render callback for #type 'p'.
 */
function design_test_pre_render_paragraph($element) {
  // In case the element has any sub-elements, render them instead.
  if ($children = element_children($element)) {
    // Prepare the element properties to apply to child elements; removing the
    // children itself, as well as #type and #pre_render, so this #pre_render
    // does not get invoked recursively.
    $properties = array_diff_key($element, array_flip($children), array('#type' => 0, '#pre_render' => 0));
    foreach ($children as $key) {
      // Be smart: If it has a #value, just complete the properties.
      if (is_array($element[$key]) && isset($element[$key]['#value'])) {
        $element[$key] += $properties;
      }
      // Otherwise, build a proper sub-element.
      else {
        $element[$key] = array('#value' => $element[$key]);
        $element[$key] += $properties;
      }
    }
    unset($element['#theme']);
  }
  return $element;
}

/**
 * Stole this from Devel Generate and modified.
 */
function design_test_create_greeking($word_count, $sentences = TRUE) {
  static $dictionary = array('abbas', 'abdo', 'abico', 'abigo', 'abluo', 'accumsan',
    'acsi', 'ad', 'adipiscing', 'aliquam', 'aliquip', 'amet', 'antehabeo',
    'appellatio', 'aptent', 'at', 'augue', 'autem', 'bene', 'blandit',
    'brevitas', 'caecus', 'camur', 'capto', 'causa', 'cogo', 'comis',
    'commodo', 'commoveo', 'consectetuer', 'consequat', 'conventio', 'cui',
    'damnum', 'decet', 'defui', 'diam', 'dignissim', 'distineo', 'dolor',
    'dolore', 'dolus', 'duis', 'ea', 'eligo', 'elit', 'enim', 'erat',
    'eros', 'esca', 'esse', 'et', 'eu', 'euismod', 'eum', 'ex', 'exerci',
    'exputo', 'facilisi', 'facilisis', 'fere', 'feugiat', 'gemino',
    'genitus', 'gilvus', 'gravis', 'haero', 'hendrerit', 'hos', 'huic',
    'humo', 'iaceo', 'ibidem', 'ideo', 'ille', 'illum', 'immitto',
    'importunus', 'imputo', 'in', 'incassum', 'inhibeo', 'interdico',
    'iriure', 'iusto', 'iustum', 'jugis', 'jumentum', 'jus', 'laoreet',
    'lenis', 'letalis', 'lobortis', 'loquor', 'lucidus', 'luctus', 'ludus',
    'luptatum', 'macto', 'magna', 'mauris', 'melior', 'metuo', 'meus',
    'minim', 'modo', 'molior', 'mos', 'natu', 'neo', 'neque', 'nibh',
    'nimis', 'nisl', 'nobis', 'nostrud', 'nulla', 'nunc', 'nutus', 'obruo',
    'occuro', 'odio', 'olim', 'oppeto', 'os', 'pagus', 'pala', 'paratus',
    'patria', 'paulatim', 'pecus', 'persto', 'pertineo', 'plaga', 'pneum',
    'populus', 'praemitto', 'praesent', 'premo', 'probo', 'proprius',
    'quadrum', 'quae', 'qui', 'quia', 'quibus', 'quidem', 'quidne', 'quis',
    'ratis', 'refero', 'refoveo', 'roto', 'rusticus', 'saepius',
    'sagaciter', 'saluto', 'scisco', 'secundum', 'sed', 'si', 'similis',
    'singularis', 'sino', 'sit', 'sudo', 'suscipere', 'suscipit', 'tamen',
    'tation', 'te', 'tego', 'tincidunt', 'torqueo', 'tum', 'turpis',
    'typicus', 'ulciscor', 'ullamcorper', 'usitas', 'ut', 'utinam',
    'utrum', 'uxor', 'valde', 'valetudo', 'validus', 'vel', 'velit',
    'veniam', 'venio', 'vereor', 'vero', 'verto', 'vicis', 'vindico',
    'virtus', 'voco', 'volutpat', 'vulpes', 'vulputate', 'wisi', 'ymo',
    'zelus');

  $greeking = '';

  // Create a stack containing the requested amount of random words.
  $words = array();
  for ($i = 0; $i < $word_count; $i++) {
    $words[] = $dictionary[array_rand($dictionary)];
  }
  // If more than 10 words have been requested, build sentences.
  $chunks = array();
  if ($word_count > 10) {
    // Some variance in sentence length.
    $sentence_length = range(4, 30);
    while ($words) {
      $chunk = array_splice($words, 0, array_rand($sentence_length));
      // Only add non-empty chunks.
      if (!empty($chunk)) {
        $chunks[] = $chunk;
      }
    }
  }
  else {
    $chunks = array($words);
  }
  foreach ($chunks as $chunk) {
    $greeking .= ucfirst(implode(' ', $chunk));
    if ($sentences) {
      $greeking .= '. ';
    }
  }

  return $greeking;
}
