<?php

	
/**
 * Implements hook_feeds_after_save().
 */
function ocg_feeds_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
    // Create new simplehtmldom object.
  $html = new simple_html_dom();
  // Parse body field markup.
  $html->load($item['xpathparser:1']);
  $wrapper = entity_metadata_wrapper('node', $entity);
  $new_body = str_replace('https://ocg-dev-sg.nci.nih.gov', '', $wrapper->body->value->value());
  $wrapper->body->set(array(
  "value" => $new_body,
  "format" => "full_html",
  ));
  $wrapper->save();
  // Find each image in the body markup.
  $imgs = $html->find('img');
  foreach ($imgs as $img) {
    $url_parts = parse_url($img->attr['src']);
    // No host means the path is relative, i.e. the image is
    // hosted locally.
    $no_host = !isset($url_parts['host']);
    // Somehow raw image data ended up in some of this content, we
    // don't want that.
    $not_data = !(isset($url_parts['scheme']) && $url_parts['scheme'] == 'data');
    if ($no_host && $not_data) {
      $path = $url_parts['path'];
      $path_parts = explode('/', $path);
      // The leading slash results in an extra empty path element
      // at the front of the array, lose it.
      array_shift($path_parts);
      // Decode encoded characters in the filename so the filename
      // doesn't get double-encoded on save.
      $filename = urldecode(array_pop($path_parts));
      // Join the path back together and lop off the
      // sites/default/files bit,leaving the directory under the
      // public schema.
      $filepath = str_replace('sites/default/files/', '', implode('/', $path_parts));
      // The image we want is at the original full path under the
      // domain we're migrating from.
      $img_url = 'https://ocg-dev-sg.nci.nih.gov' . $path;
      // Build a stream wrapper for the destination directory.
      $uri = file_build_uri($filepath);
      // Ensure destination directory exists and is writeable.
      if (file_prepare_directory($uri, FILE_CREATE_DIRECTORY)) {
        $destination = $uri . '/' . $filename;
        // Retrieve image.
        system_retrieve_file($img_url, $destination, TRUE, FILE_EXISTS_REPLACE);
      }  // end if
    } else {
      $path = $url_parts['path'];
      $path_parts = explode('/', $path);
      // The leading slash results in an extra empty path element
      // at the front of the array, lose it.
      array_shift($path_parts);
      // Decode encoded characters in the filename so the filename
      // doesn't get double-encoded on save.
      $filename = urldecode(array_pop($path_parts));
      // Join the path back together and lop off the
      // sites/default/files bit,leaving the directory under the
      // public schema.
      $filepath = implode('/', $path_parts);
      // The image we want is at the original full path under the
      // domain we're migrating from.
      $img_url = 'https://ocg-dev-sg.nci.nih.gov' . $path;
      // Build a stream wrapper for the destination directory.
      $uri = file_build_uri($filepath);
      // Ensure destination directory exists and is writeable.
      if (file_prepare_directory($uri, FILE_CREATE_DIRECTORY)) {
        $destination = 'public://' . $filename;
        // Retrieve image.
        system_retrieve_file($img_url, $destination, TRUE, FILE_EXISTS_REPLACE);
      }
    }
  }  // end foreach
}

/**
 * Implements hook_feeds_processor_targets().
 */
function ocg_feeds_feeds_processor_targets($entity_type, $bundle) {
  $targets = array();

  // Provide new target.
  $targets['manual_crop'] = array(
    'name' => t('Manual Crop'),
    'description' => t('Adds Manual Crop dimensions to images'),
    'callback' => 'ocg_feeds_set_target',
  );

  return $targets;
}

/**
 * Mapping callback.
 */
function ocg_feeds_set_target($source, $entity, $target, $value, $mapping) {
  dpm(get_defined_vars());
  if ($value[0]) {
    $record = array(
        'fid' => $entity->field_image['und'][0]['fid'],
        'vid' => 0,
        'style_name' => $value[0],
        'x' => $value[1],
        'y' => $value[2],
        'width' => $value[3],
        'height' => $value[4]
    );
    dpm($record);
    drupal_write_record('manualcrop', $record);
  }
}